- name: install conan
  if: matrix.use_conan == true
  run: |
    pip install conan

- name: install cmake
  uses: lukka/get-cmake@v3.17.1

- name: windows setup
  if: runner.os == 'Windows'
  run: |
    echo "::set-env name=CMAKE_EXTRA_ARGS::$CMAKE_EXTRA_ARGS -DNMOS_CPP_CONAN_BUILD_LIBS=cpprestsdk;missing -DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe"
    & "${{ env.GITHUB_WORKSPACE }}/gdrive/gdrive-windows-x64.exe" --config ${{ env.GITHUB_WORKSPACE }}/gdrive --service-account credentials.json download --path ${{ env.GITHUB_WORKSPACE }} ${{ env.bonjourid }}
    msiexec /i ${{ env.GITHUB_WORKSPACE }}\Bonjour64.msi /qn /norestart
    netsh interface set interface name="vEthernet (nat)" admin=DISABLED
    $env:hostip = (
      Get-NetIPConfiguration |
      Where-Object {
          $_.IPv4DefaultGateway -ne $null -and
          $_.NetAdapter.Status -ne "Disconnected"
      }
    ).IPv4Address.IPAddress
    echo "::set-env name=HOST_IP_ADDRESS::$env:hostip"
    ipconfig
  env:
    bonjourid: ${{ secrets.BONJOUR_DRIVE_ID }}

- name: mac setup
  if: runner.os == 'macOS'
  run: |
    echo "::set-env name=CMAKE_EXTRA_ARGS::$CMAKE_EXTRA_ARGS '-DNMOS_CPP_CONAN_BUILD_LIBS=cpprestsdk;missing'"
    hostip=$(ipconfig getifaddr en0)
    echo "::set-env name=HOST_IP_ADDRESS::$hostip"
    ifconfig

- name: mac docker install
  if: false
  run: |
    brew install docker docker-compose docker-machine xhyve docker-machine-driver-xhyve
    sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
    sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
    mkdir -p /Users/runner/.docker/machine/cache/
    curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso
    i=0
    while ! docker-machine "--github-api-token=${{ secrets.GITHUB_TOKEN }}" create default --driver xhyve; do
      docker-machine rm -f default
      sleep 1
      $(( i++ ))
      if [[ $i -gt 5 ]]; then
        exit 1
      fi
    done
    eval $(docker-machine env default)
    echo "::set-env name=DOCKER_MACHINE_NAME::$DOCKER_MACHINE_NAME"
    echo "::set-env name=DOCKER_TLS_VERIFY::$DOCKER_TLS_VERIFY"
    echo "::set-env name=DOCKER_HOST::$DOCKER_HOST"
    echo "::set-env name=DOCKER_CERT_PATH::$DOCKER_CERT_PATH"


- name: ubuntu setup
  if: runner.os == 'Linux'
  run: |
    sudo ip addr flush dev docker0 || echo "remove docker ip failed"
    hostip=$(hostname -I | cut -f1 -d' ')
    echo "::set-env name=HOST_IP_ADDRESS::$hostip"
    ip address

- name: ubuntu mdns install
  if: runner.os == 'Linux' && matrix.install_mdns == true
  run: |
    cd ${{ env.GITHUB_WORKSPACE }}
    curl https://opensource.apple.com/tarballs/mDNSResponder/mDNSResponder-878.200.35.tar.gz -o mDNSResponder-878.200.35.tar.gz
    tar -xzf mDNSResponder-878.200.35.tar.gz
    patch -d mDNSResponder-878.200.35/ -p1 < ${{ env.GITHUB_WORKSPACE }}/Development/third_party/mDNSResponder/unicast.patch
    patch -d mDNSResponder-878.200.35/ -p1 < ${{ env.GITHUB_WORKSPACE }}/Development/third_party/mDNSResponder/permit-over-long-service-types.patch
    patch -d mDNSResponder-878.200.35/ -p1 < ${{ env.GITHUB_WORKSPACE }}/Development/third_party/mDNSResponder/poll-rather-than-select.patch
    cd mDNSResponder-878.200.35/mDNSPosix
    make os=linux && sudo make os=linux install

- name: ubuntu non-conan setup
  if: runner.os == 'Linux' && matrix.use_conan == false
  run: |
    sudo apt-get install -y \
      libboost-chrono-dev \
      libboost-date-time-dev \
      libboost-regex-dev \
      libboost-system-dev \
      libboost-thread-dev \
      libboost-random-dev \
      libboost-filesystem-dev \
      openssl \
      libssl-dev

    cd ${{ env.RUNNER_WORKSPACE }}
    git clone --recurse-submodules --branch v2.10.15 https://github.com/Microsoft/cpprestsdk
    cd cpprestsdk/Release
    mkdir build
    cd build
    cmake .. -DCMAKE_BUILD_TYPE:STRING="Release" -DWERROR:BOOL="0" -DBUILD_SAMPLES:BOOL="0" -DBUILD_TESTS:BOOL="0"
    make -j 2 && sudo make install
    echo "::set-env name=CMAKE_EXTRA_ARGS::$CMAKE_EXTRA_ARGS -DWEBSOCKETPP_INCLUDE_DIR:PATH=\"${{ env.RUNNER_WORKSPACE }}/cpprestsdk/Release/libs/websocketpp\""

- name: disable conan
  if: matrix.use_conan == false
  run: |
    echo "::set-env name=CMAKE_EXTRA_ARGS::$CMAKE_EXTRA_ARGS -DUSE_CONAN:BOOL=\"0\""

- name: ubuntu avahi setup
  if: runner.os == 'Linux' && matrix.install_mdns == false
  run: |
    sudo apt-get install -f libavahi-compat-libdnssd-dev
    echo "::set-env name=CTEST_EXTRA_ARGS::$CTEST_EXTRA_ARGS -E testMdnsAdvertiseAddress"
    sudo sed -i 's/#*allow-interfaces=.*/allow-interfaces=eth0/g' /etc/avahi/avahi-daemon.conf
    sudo systemctl restart avahi-daemon


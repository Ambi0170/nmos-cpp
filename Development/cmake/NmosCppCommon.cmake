# caller can set NMOS_CPP_DIR if the project is different
if(NOT DEFINED NMOS_CPP_DIR)
    set(NMOS_CPP_DIR ${PROJECT_SOURCE_DIR})
endif()

set(USE_CONAN ON CACHE BOOL "Use Conan to acquire dependencies")

if(${USE_CONAN})
    include(${NMOS_CPP_DIR}/cmake/NmosCppConan.cmake)
endif()

# enable C++11
enable_language(CXX)
set(CMAKE_CXX_STANDARD 11 CACHE STRING "Default value for CXX_STANDARD property of targets")
if(CMAKE_CXX_STANDARD STREQUAL "98")
    message(FATAL_ERROR "CMAKE_CXX_STANDARD must be 11 or higher; C++98 is not supported")
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    # note: to see the output of any failed tests, set CTEST_OUTPUT_ON_FAILURE=1 in the environment
    # and also remember that CMake doesn't add dependencies to the "test" (or "RUN_TESTS") target
    # so after changing code under test, it is important to "make all" (or build "ALL_BUILD")
    enable_testing()
endif()

# location of additional CMake modules
set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${NMOS_CPP_DIR}/third_party/cmake
    ${NMOS_CPP_DIR}/cmake
    )

# location of <PackageName>Config.cmake files created by Conan
set(CMAKE_PREFIX_PATH
    ${CMAKE_PREFIX_PATH}
    ${CMAKE_CURRENT_BINARY_DIR}
    )

if(${USE_CONAN} AND CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    # add the CONFIG option to find_package, so a FindXXXX.cmake file in CMake's default modules directory
    # isn't used instead of the <PackageName>Config.cmake generated by Conan in the current binary directory
    # see https://docs.conan.io/en/1.38/integrations/build_system/cmake/cmake_find_package_multi_generator.html
    set(FIND_PACKAGE_USE_CONFIG CONFIG)
    # from CMake 3.15, using CMAKE_FIND_PACKAGE_PREFER_CONFIG might be an alternative approach 
    # see https://cmake.org/cmake/help/v3.15/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.html
endif()

# guard against in-source builds and bad build-type strings
include(safeguards)

# set common C++ compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
    add_compile_options("$<$<CONFIG:Debug>:-O0;-g3>")
    add_compile_options("$<$<CONFIG:Release>:-O3>")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)
        # required for std::this_thread::sleep_for in e.g. mdns/test/mdns_test.cpp
        # see https://stackoverflow.com/questions/12523122/what-is-glibcxx-use-nanosleep-all-about
        add_definitions(-D_GLIBCXX_USE_NANOSLEEP)
    endif()
elseif(MSVC)
    # set CharacterSet to Unicode rather than MultiByte
    add_definitions(/DUNICODE /D_UNICODE)
endif()

# set most compiler warnings on
if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
    add_compile_options(-Wall -Wstrict-aliasing -fstrict-aliasing -Wextra -Wno-unused-parameter -pedantic -Wno-long-long)
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5)
        add_compile_options(-Wno-missing-field-initializers)
    endif()
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)
        add_compile_options(-fpermissive)
    endif()
elseif(MSVC)
    # see https://cmake.org/cmake/help/latest/policy/CMP0092.html
    if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    endif()
    add_compile_options("/FI${NMOS_CPP_DIR}/detail/vc_disable_warnings.h")
endif()
